name: Win32 Comprehensive Tests

on:
  # Executar nos PRs e pushes para main
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  
  # Executar manualmente
  workflow_dispatch:
    inputs:
      priorities:
        description: 'Test priorities (critical,high,medium,low)'
        required: false
        default: 'critical,high'
      max_concurrent:
        description: 'Maximum concurrent tests'
        required: false
        default: '5'
      timeout:
        description: 'Timeout per function (seconds)'
        required: false
        default: '30'

  # Executar automaticamente toda semana
  schedule:
    - cron: '0 2 * * 1'  # Segunda-feira √†s 2:00 UTC

jobs:
  comprehensive-win32-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      matrix:
        language: ['us', 'br']
        priority_group: 
          - 'critical'
          - 'high'
          - 'medium,low'
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 rich aiohttp

    - name: Prepare test environment
      run: |
        mkdir -p tests/reports
        
    - name: Run Win32 comprehensive tests - ${{ matrix.priority_group }} (${{ matrix.language }})
      id: tests
      run: |
        # Configure test parameters
        PRIORITIES="${{ github.event.inputs.priorities || matrix.priority_group }}"
        MAX_CONCURRENT="${{ github.event.inputs.max_concurrent || '5' }}"
        TIMEOUT="${{ github.event.inputs.timeout || '30' }}"
        
        echo "Running tests with priorities: $PRIORITIES"
        echo "Language: ${{ matrix.language }}"
        echo "Max concurrent: $MAX_CONCURRENT"
        echo "Timeout: $TIMEOUT"
        
        # Execute comprehensive tests
        python tests/automated_win32_tests.py \
          --webhook "${{ secrets.DISCORD_WEBHOOK }}" \
          --language "${{ matrix.language }}" \
          --priorities $PRIORITIES \
          --concurrent $MAX_CONCURRENT \
          --timeout $TIMEOUT \
          --quiet
      continue-on-error: true
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        GITHUB_TOKEN: ${{ secrets.ACTIONS }}

    - name: Parse test results
      id: parse_results
      run: |
        # Find the most recent test report
        LATEST_REPORT=$(find tests/reports -name "win32_tests_report_*.json" -type f -printf '%T+ %p\n' | sort -r | head -1 | cut -d' ' -f2-)
        
        if [ -f "$LATEST_REPORT" ]; then
          echo "Found test report: $LATEST_REPORT"
          
          # Extract key metrics using Python
          python -c "
          import json
          import sys
          
          with open('$LATEST_REPORT', 'r') as f:
              report = json.load(f)
          
          summary = report.get('summary', {})
          success_rate = summary.get('success_rate', 0)
          total_tested = summary.get('total_tested', 0)
          passed = summary.get('passed', 0)
          failed = summary.get('failed', 0)
          
          print(f'SUCCESS_RATE={success_rate}')
          print(f'TOTAL_TESTED={total_tested}')
          print(f'PASSED={passed}')
          print(f'FAILED={failed}')
          
          # Set exit code based on success rate
          if success_rate < 70:
              sys.exit(1)
          elif success_rate < 85:
              sys.exit(2)  # Warning
          else:
              sys.exit(0)  # Success
          " >> $GITHUB_OUTPUT
        else
          echo "No test report found"
          echo "SUCCESS_RATE=0" >> $GITHUB_OUTPUT
          echo "TOTAL_TESTED=0" >> $GITHUB_OUTPUT
          echo "PASSED=0" >> $GITHUB_OUTPUT
          echo "FAILED=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: win32-test-reports-${{ matrix.language }}-${{ matrix.priority_group }}
        path: tests/reports/
        retention-days: 30

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the latest report
          const reportsDir = 'tests/reports';
          if (!fs.existsSync(reportsDir)) {
            console.log('No reports directory found');
            return;
          }
          
          const files = fs.readdirSync(reportsDir)
            .filter(f => f.startsWith('win32_tests_report_') && f.endsWith('.json'))
            .map(f => ({
              name: f,
              path: path.join(reportsDir, f),
              time: fs.statSync(path.join(reportsDir, f)).mtime
            }))
            .sort((a, b) => b.time - a.time);
          
          if (files.length === 0) {
            console.log('No test reports found');
            return;
          }
          
          const reportPath = files[0].path;
          const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
          const summary = report.summary || {};
          
          const successRate = summary.success_rate || 0;
          const totalTested = summary.total_tested || 0;
          const passed = summary.passed || 0;
          const failed = summary.failed || 0;
          const docNotFound = summary.documentation_not_found || 0;
          const parserErrors = summary.parser_errors || 0;
          
          // Determine status emoji and color
          let statusEmoji, statusText;
          if (successRate >= 90) {
            statusEmoji = '‚úÖ';
            statusText = 'Excellent';
          } else if (successRate >= 70) {
            statusEmoji = '‚ö†Ô∏è';
            statusText = 'Good';
          } else {
            statusEmoji = '‚ùå';
            statusText = 'Needs Attention';
          }
          
          const language = '${{ matrix.language }}' === 'br' ? 'Portugu√™s' : 'English';
          const priorities = '${{ matrix.priority_group }}';
          
          const comment = `
          ## ${statusEmoji} Win32 Tests Results - ${language} (${priorities})
          
          **Status:** ${statusText} (${successRate.toFixed(1)}% success rate)
          
          | Metric | Value |
          |--------|-------|
          | Total Tested | ${totalTested} |
          | ‚úÖ Passed | ${passed} |
          | ‚ùå Failed | ${failed} |
          | üìñ No Documentation | ${docNotFound} |
          | ‚ö†Ô∏è Parser Errors | ${parserErrors} |
          | üìä Success Rate | ${successRate.toFixed(1)}% |
          
          <details>
          <summary>View Details</summary>
          
          **Test Configuration:**
          - Language: ${language}
          - Priorities: ${priorities}
          - Matrix: ${{ matrix.language }}-${{ matrix.priority_group }}
          
          **Performance:**
          - Duration: ${(summary.test_duration || 0).toFixed(1)}s
          - Timestamp: ${summary.timestamp || 'Unknown'}
          
          </details>
          `;
          
          // Create or update comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes(`Win32 Tests Results - ${language} (${priorities})`)
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  aggregate-results:
    needs: comprehensive-win32-tests
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Aggregate test results
      run: |
        echo "## üìä Win32 Comprehensive Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Language | Priority Group | Success Rate | Total | Passed | Failed |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|----------------|--------------|-------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Process all test reports
        find . -name "win32_tests_report_*.json" -type f | while read report; do
          if [ -f "$report" ]; then
            python -c "
            import json
            import os
            import re
            
            report_file = '$report'
            
            with open(report_file, 'r') as f:
                data = json.load(f)
            
            summary = data.get('summary', {})
            success_rate = summary.get('success_rate', 0)
            total = summary.get('total_tested', 0)
            passed = summary.get('passed', 0)
            failed = summary.get('failed', 0)
            
            # Extract language and priority from path
            path_parts = report_file.split('/')
            artifact_name = [p for p in path_parts if 'win32-test-reports-' in p]
            if artifact_name:
                parts = artifact_name[0].replace('win32-test-reports-', '').split('-', 1)
                language = parts[0] if len(parts) > 0 else 'unknown'
                priority = parts[1] if len(parts) > 1 else 'unknown'
            else:
                language = 'unknown'
                priority = 'unknown'
            
            # Determine status emoji
            if success_rate >= 90:
                status = '‚úÖ'
            elif success_rate >= 70:
                status = '‚ö†Ô∏è'
            else:
                status = '‚ùå'
            
            print(f'| {language} | {priority} | {status} {success_rate:.1f}% | {total} | {passed} | {failed} |')
            " >> $GITHUB_STEP_SUMMARY
          fi
        done

    - name: Check overall success
      run: |
        # Aggregate all success rates to determine overall status
        overall_success=true
        
        find . -name "win32_tests_report_*.json" -type f | while read report; do
          if [ -f "$report" ]; then
            success_rate=$(python -c "
            import json
            with open('$report', 'r') as f:
                data = json.load(f)
            print(data.get('summary', {}).get('success_rate', 0))
            ")
            
            if (( $(echo "$success_rate < 70" | bc -l) )); then
              echo "Test failure detected: $success_rate% success rate"
              overall_success=false
            fi
          fi
        done
        
        if [ "$overall_success" = false ]; then
          echo "‚ùå Some tests have low success rates"
          exit 1
        else
          echo "‚úÖ All tests passed with acceptable success rates"
        fi