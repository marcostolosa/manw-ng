name: 🚀 Release Build (standalone + UPX)

on:
  push:
    tags:
      - 'v*'
      - 'release-*'

env:
  PYTHON_VERSION: '3.11'
  ENTRYPOINT: 'manw-ng.py'   # ajuste se seu entry for outro
  USE_UPX: '1'               # 1 = habilita UPX

jobs:
  create-release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Get tag name
        id: get_tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          if git show-ref --verify --quiet refs/heads/main; then DEFAULT_BRANCH=main; else DEFAULT_BRANCH=master; fi

          echo "## 🆕 Changes in ${{ steps.get_tag.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md

          LAST_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_tag.outputs.tag }}^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### 📋 Commits since $LAST_TAG:" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $LAST_TAG..${{ steps.get_tag.outputs.tag }} >> release_notes.md
          else
            echo "### 📋 All commits in this release:" >> release_notes.md
            git log --pretty=format:"- %s (%h)" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## 📦 Standalone Binaries (no Python required)" >> release_notes.md
          echo "- **Windows x64**: manw-ng-windows-x64.exe *(onefile/standalone; UPX)*" >> release_notes.md
          echo "- **Windows x86**: manw-ng-windows-x86.exe *(onefile/standalone; UPX)*" >> release_notes.md
          echo "- **Linux x64**: manw-ng-linux-x64 *(onefile/standalone; ubuntu-latest; UPX)*" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🚀 Usage Examples" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "# Linux" >> release_notes.md
          echo "chmod +x manw-ng-linux-x64" >> release_notes.md
          echo "./manw-ng-linux-x64 CreateProcessW" >> release_notes.md
          echo "./manw-ng-linux-x64 HeapAlloc --output json -l br" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Windows" >> release_notes.md
          echo "manw-ng-windows-x64.exe SetWindowsHookEx" >> release_notes.md
          echo "manw-ng-windows-x64.exe WSAStartup --output json" >> release_notes.md
          echo '```' >> release_notes.md

      - name: 📦 Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: MANW-NG ${{ steps.get_tag.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  build-windows:
    name: 🪟 Build Windows Binaries (onefile + UPX)
    runs-on: windows-latest
    permissions:
      contents: write
    environment: manw-ng
    needs: create-release
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            python-arch: x64
            artifact-name: manw-ng-windows-x64
          - arch: x86
            python-arch: x86
            artifact-name: manw-ng-windows-x86

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }} (${{ matrix.python-arch }})
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.python-arch }}

      - name: 📦 Install project deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 rich lxml
          pip install pyinstaller==6.*

      - name: ⬇️ Install UPX (Windows)
        if: env.USE_UPX == '1'
        shell: pwsh
        run: |
          $ver = '4.2.4'
          $url = "https://github.com/upx/upx/releases/download/v$ver/upx-$ver-win64.zip"
          Invoke-WebRequest $url -OutFile upx.zip
          Expand-Archive upx.zip -DestinationPath upx
          echo "$PWD\upx\upx-$ver-win64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 🔨 Build (PyInstaller onefile)
        shell: pwsh
        run: |
          $Name = "${{ matrix.artifact-name }}"
          $args = @('--onefile','--console','--clean','--name', $Name)
          if ($env:USE_UPX -eq '1') {
            $upxPath = Join-Path $PWD 'upx\upx-4.2.4-win64'
            $args += @('--upx-dir', $upxPath)
          }
          $args += $env:ENTRYPOINT
          pyinstaller @args
          if (!(Test-Path "dist\$Name.exe")) { Write-Error 'Build failed'; exit 1 }
          Get-ChildItem dist

      - name: ✅ Smoke test
        shell: pwsh
        run: |
          $exe = "dist\${{ matrix.artifact-name }}.exe"
          & $exe --version
          & $exe --help
          & $exe CreateProcessW --output json | Out-File dist\test_output.json -Encoding utf8
          if (-not (Select-String -Path dist\test_output.json -Pattern '"signature"')) { Write-Error 'JSON inválido'; exit 1 }

      - name: 🔎 Inspect bundle (PyInstaller archive)
        shell: pwsh
        run: |
          python -m PyInstaller.utils.cliutils.archive_viewer dist\${{ matrix.artifact-name }}.exe -l | Select-Object -First 150

      - name: 📤 Upload Windows ${{ matrix.arch }} Binary
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag_name }}
          files: dist/${{ matrix.artifact-name }}.exe

  build-linux:
    name: 🐧 Build Linux x86_64 (static + UPX)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    environment: manw-ng
    needs: create-release

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 rich lxml
          pip install pyinstaller==6.*

      - name: ⬇️ Install UPX (Linux)
        if: env.USE_UPX == '1'
        run: |
          curl -LO https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-amd64_linux.tar.xz
          tar -xJf upx-4.2.4-amd64_linux.tar.xz
          sudo mv upx-4.2.4-amd64_linux/upx /usr/local/bin/
          upx --version

      - name: 🔨 Build (PyInstaller static)
        run: |
          ENTRY="${{ env.ENTRYPOINT }}"
          
          if [ "${{ env.USE_UPX }}" = "1" ]; then
            UPX_FLAGS="--upx-dir /usr/local/bin"
          else
            UPX_FLAGS=""
          fi
          
          echo "Building static executable with PyInstaller..."
          python --version
          pyinstaller --version
          
          pyinstaller --onefile --console --clean $UPX_FLAGS --name manw-ng-linux-x64 "$ENTRY"
          
          # Ensure executable permissions
          chmod +x dist/manw-ng-linux-x64
          ls -la dist/

      - name: ✅ Smoke test (Linux)
        run: |
          ./dist/manw-ng-linux-x64 --version
          ./dist/manw-ng-linux-x64 --help
          ./dist/manw-ng-linux-x64 CreateProcessW --output json > dist/test_output.json
          grep -q '"signature"' dist/test_output.json

      - name: 📤 Upload Linux x64 Binary
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.tag_name }}
          files: dist/manw-ng-linux-x64

  notify-completion:
    name: 📢 Release Notification
    runs-on: ubuntu-latest
    needs: [create-release, build-windows, build-linux]
    if: always()
    steps:
      - name: 📢 Summary
        run: |
          echo "Release ${{ needs.create-release.outputs.tag_name }} finalizada."
          echo "Windows x64/x86: onefile + UPX"
          echo "Linux x64: ubuntu-latest static + UPX"
