name: üöÄ Release Build

on:
  push:
    tags:
      - 'v*'
      - 'release-*'

env:
  PYTHON_VERSION: '3.11'

jobs:
  create-release:
    name: üè∑Ô∏è Create Release
    runs-on: ubuntu-latest
    environment: manw-ng
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üè∑Ô∏è Get tag name
      id: get_tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: üìù Generate release notes
      id: release_notes
      run: |
        # Gera notas de release automaticamente
        if git show-ref --verify --quiet refs/heads/main; then
          DEFAULT_BRANCH="main"
        else
          DEFAULT_BRANCH="master"
        fi
        
        echo "## üÜï Changes in ${{ steps.get_tag.outputs.tag }}" > release_notes.md
        echo "" >> release_notes.md
        
        # Pega commits desde a √∫ltima tag
        LAST_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_tag.outputs.tag }}^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### üìã Commits since $LAST_TAG:" >> release_notes.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..${{ steps.get_tag.outputs.tag }} >> release_notes.md
        else
          echo "### üìã All commits in this release:" >> release_notes.md  
          git log --pretty=format:"- %s (%h)" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## üì¶ Static Binaries (No Dependencies Required)" >> release_notes.md
        echo "- **Windows x64**: manw-ng-windows-x64.exe *(Standalone executable)*" >> release_notes.md
        echo "- **Windows x86**: manw-ng-windows-x86.exe *(Standalone executable)*" >> release_notes.md
        echo "- **Linux x64**: manw-ng-linux-x64 *(Static binary - works on any Linux)*" >> release_notes.md
        echo "- **Linux x86**: manw-ng-linux-x86 *(Static binary - works on any Linux)*" >> release_notes.md
        echo "" >> release_notes.md
        echo "### ‚ú® Features" >> release_notes.md
        echo "- üöÄ **No installation required** - just download and run" >> release_notes.md
        echo "- üì¶ **Self-contained** - all dependencies included" >> release_notes.md  
        echo "- üåç **Universal compatibility** - works on any modern system" >> release_notes.md
        echo "" >> release_notes.md
        echo "## üöÄ Usage Examples" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Linux/macOS" >> release_notes.md
        echo "chmod +x manw-ng-linux-x64" >> release_notes.md
        echo "./manw-ng-linux-x64 CreateProcessW" >> release_notes.md
        echo "./manw-ng-linux-x64 HeapAlloc --output json -l br" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Windows" >> release_notes.md
        echo "manw-ng-windows-x64.exe SetWindowsHookEx" >> release_notes.md
        echo "manw-ng-windows-x64.exe WSAStartup --output json" >> release_notes.md
        echo "\`\`\`" >> release_notes.md

    - name: üì¶ Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: MANW-NG ${{ steps.get_tag.outputs.tag }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  build-windows:
    name: ü™ü Build Windows Binaries
    runs-on: windows-latest
    environment: manw-ng
    needs: create-release
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            python-arch: x64
            artifact-name: manw-ng-windows-x64.exe
          - arch: x86
            python-arch: x86
            artifact-name: manw-ng-windows-x86.exe
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python ${{ env.PYTHON_VERSION }} (${{ matrix.python-arch }})
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.python-arch }}

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: üß™ Run tests
      run: |
        pip install -r requirements-dev.txt
        python -m pytest tests/ -v --tb=short

    - name: üî® Build Windows ${{ matrix.arch }} executable
      run: |
        pyinstaller --onefile --noupx --clean --strip --console ^
          --name ${{ matrix.artifact-name }} ^
          --add-data "manw_ng;manw_ng" ^
          --hidden-import=requests --hidden-import=requests.adapters ^
          --hidden-import=requests.packages --hidden-import=requests.packages.urllib3 ^
          --hidden-import=requests.packages.urllib3.util --hidden-import=requests.packages.urllib3.util.retry ^
          --hidden-import=bs4 --hidden-import=bs4.builder --hidden-import=bs4.builder._lxml ^
          --hidden-import=lxml --hidden-import=lxml.etree --hidden-import=lxml._elementpath ^
          --hidden-import=rich --hidden-import=rich.console --hidden-import=rich.text ^
          --hidden-import=rich.markdown --hidden-import=rich.panel --hidden-import=rich.table ^
          --hidden-import=urllib3 --hidden-import=urllib3.util --hidden-import=urllib3.util.retry ^
          --hidden-import=urllib3.poolmanager --hidden-import=urllib3.connection ^
          --hidden-import=certifi --hidden-import=charset_normalizer --hidden-import=idna ^
          --hidden-import=email --hidden-import=email.mime --hidden-import=email.mime.multipart ^
          --collect-all=certifi --collect-all=charset_normalizer ^
          --exclude-module=tkinter --exclude-module=matplotlib --exclude-module=numpy ^
          --exclude-module=pandas --exclude-module=PIL --exclude-module=PyQt5 ^
          --exclude-module=PyQt6 --exclude-module=PySide2 --exclude-module=PySide6 ^
          --exclude-module=scipy --exclude-module=IPython --exclude-module=jupyter ^
          --distpath=dist --workpath=build/${{ matrix.arch }} manw-ng.py
      shell: cmd

    - name: ‚úÖ Test executable
      run: |
        cd dist
        echo "Testing ${{ matrix.artifact-name }} executable..."
        ./${{ matrix.artifact-name }} --version
        ./${{ matrix.artifact-name }} --help
        echo "Testing actual function lookup..."
        ./${{ matrix.artifact-name }} CreateProcessW --output json > test_output.json
        echo "Checking output contains expected JSON structure..."
        if grep -q "signature" test_output.json; then
          echo "‚úÖ Function lookup working correctly"
        else
          echo "‚ùå Function lookup failed"
          exit 1
        fi
      shell: bash

    - name: üìä Get file info and verify static build
      run: |
        cd dist
        echo "=== File Information ==="
        ls -la ${{ matrix.artifact-name }}
        file ${{ matrix.artifact-name }} || echo "file command not available"
        
        echo ""
        echo "=== Checking for static linking ==="
        # Check if executable is portable (no external DLL dependencies)
        echo "Dependencies check..."
        if command -v ldd >/dev/null 2>&1; then
          ldd ${{ matrix.artifact-name }} || echo "No dynamic dependencies (good for portability)"
        else
          echo "ldd not available, using dumpbin..."
          # Use Windows dumpbin if available
          if command -v dumpbin >/dev/null 2>&1; then
            dumpbin /DEPENDENTS ${{ matrix.artifact-name }} || echo "dumpbin failed"
          else
            echo "No dependency checking tools available"
          fi
        fi
        
        echo ""
        echo "=== Size Information ==="
        du -h ${{ matrix.artifact-name }}
        echo "Build completed successfully!"
      shell: bash

    - name: üì§ Upload Windows ${{ matrix.arch }} Binary
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS }}
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: ./dist/${{ matrix.artifact-name }}

  build-linux:
    name: üêß Build Linux Binaries
    runs-on: ubuntu-latest
    environment: manw-ng
    needs: create-release
    strategy:
      matrix:
        arch: [x64, x86]
        include:
          - arch: x64
            python-arch: x64
            artifact-name: manw-ng-linux-x64
            docker-platform: linux/amd64
          - arch: x86
            python-arch: x86
            artifact-name: manw-ng-linux-x86
            docker-platform: linux/386

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêß Set up QEMU for cross-compilation
      if: matrix.arch == 'x86'
      uses: docker/setup-qemu-action@v3

    - name: üî® Build Linux ${{ matrix.arch }} executable
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller staticx patchelf
        
        # Build with PyInstaller
        pyinstaller --onefile --strip --name ${{ matrix.artifact-name }}-temp \
          --add-data "manw_ng:manw_ng" \
          --hidden-import=requests --hidden-import=requests.adapters \
          --hidden-import=requests.packages --hidden-import=requests.packages.urllib3 \
          --hidden-import=bs4 --hidden-import=bs4.builder --hidden-import=lxml \
          --hidden-import=rich --hidden-import=rich.console --hidden-import=rich.markdown \
          --hidden-import=urllib3 --hidden-import=certifi --hidden-import=charset_normalizer \
          --collect-all=certifi --collect-all=charset_normalizer \
          --exclude-module=tkinter --exclude-module=matplotlib --exclude-module=numpy \
          --exclude-module=pandas --exclude-module=PIL --exclude-module=PyQt5 \
          --distpath=dist --workpath=build/${{ matrix.arch }} manw-ng.py
        
        # Make it truly static with staticx (bundles all dependencies)
        cd dist
        staticx ${{ matrix.artifact-name }}-temp ${{ matrix.artifact-name }}
        rm ${{ matrix.artifact-name }}-temp
        chmod +x ${{ matrix.artifact-name }}

    - name: üìä Get file info and verify static build
      run: |
        cd dist
        echo "=== File Information ==="
        ls -la ${{ matrix.artifact-name }}
        file ${{ matrix.artifact-name }}
        
        echo ""
        echo "=== Checking static linking ==="
        readelf -h ${{ matrix.artifact-name }} 2>/dev/null || echo "readelf not available"
        
        echo ""
        echo "=== Dynamic dependencies check ==="
        if ldd ${{ matrix.artifact-name }} 2>/dev/null; then
          echo "‚ö†Ô∏è  Has dynamic dependencies (may not be portable)"
        else
          echo "‚úÖ No dynamic dependencies found (truly static)"
        fi
        
        echo ""
        echo "=== Size Information ==="
        du -h ${{ matrix.artifact-name }}

    - name: ‚úÖ Test executable
      run: |
        cd dist
        echo "Testing ${{ matrix.artifact-name }} executable..."
        ./${{ matrix.artifact-name }} --version
        ./${{ matrix.artifact-name }} --help
        echo "Testing actual function lookup..."
        ./${{ matrix.artifact-name }} CreateProcessW --output json > test_output.json
        echo "Checking output contains expected JSON structure..."
        if grep -q "signature" test_output.json; then
          echo "‚úÖ Function lookup working correctly"
        else
          echo "‚ùå Function lookup failed"
          cat test_output.json
          exit 1
        fi

    - name: üì§ Upload Linux ${{ matrix.arch }} Binary  
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS }}
      with:
        tag_name: ${{ needs.create-release.outputs.tag_name }}
        files: ./dist/${{ matrix.artifact-name }}

  notify-completion:
    name: üì¢ Release Notification
    runs-on: ubuntu-latest
    needs: [create-release, build-windows, build-linux]
    if: always()

    steps:
    - name: üì¢ Success notification
      if: needs.build-windows.result == 'success' && needs.build-linux.result == 'success'
      run: |
        echo "üéâ Release ${{ needs.create-release.outputs.tag_name }} completed successfully!"
        echo "‚úÖ Windows x64 binary created"
        echo "‚úÖ Windows x86 binary created" 
        echo "‚úÖ Linux x64 binary created"
        echo "‚úÖ Linux x86 binary created"
        echo ""
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.tag_name }}"

    - name: üì¢ Failure notification
      if: needs.build-windows.result == 'failure' || needs.build-linux.result == 'failure'
      run: |
        echo "‚ùå Release build failed!"
        echo "Windows build: ${{ needs.build-windows.result }}"
        echo "Linux build: ${{ needs.build-linux.result }}"
        exit 1